import java.util.regex.Matcher
import org.apache.tools.ant.filters.*

plugins {
    id 'idea'
    id 'org.asciidoctor.convert' version '1.5.6' apply false
}

subprojects {
    group = 'volvox'
    version = '0.0.0.0'
}

def projectIndex = 0
subprojects {
    ext {
        /*
            Java plugin settings
         */
        globalSourceCompatibility = '1.10'
        globalTargetCompatibility = '1.10'
    }

    afterEvaluate {
        repositories {
            jcenter()
            mavenCentral()
            mavenLocal()
        }

        /*
            Common configuration for application plugin
         */
        if (plugins.hasPlugin('application')) {

            //evaluate system IP address for dev env run only
            def subnetPrefix = '127.0.8.'
            def lighthouseIp = subnetPrefix + 1
            def selfIp = lighthouseIp
            if (name != 'lighthouse') {
                def ipSeg = 64 + projectIndex
                selfIp = subnetPrefix + ipSeg
                projectIndex++
            }

            ext {
                /*
                    Application plugin settings
                 */
                distributionConfigLocation = 'config'
            }

            //setup logger config location
            run {
                doFirst {
                    jvmArgs = [
                            "-Dlog4j.configurationFile=${rootDir}/config/commonLog4j2.xml,${projectDir}/config/log4j2.xml",
                            "-DAKKA_SYSTEM_HOSTNAME=${selfIp}",
                            "-DAKKA_LIGHTHOUSE_IP=akka://volvox@${lighthouseIp}:25520"
                    ]
                }
            }
            startScripts {
                doFirst {
                    defaultJvmOpts = [
                            "-Dlog4j.configurationFile=APPROOT${distributionConfigLocation}/commonLog4j2.xml,APPROOT${distributionConfigLocation}/log4j2.xml"
                    ]
                }
                doLast {
                    def bashFile = new File(outputDir, applicationName)
                    String bashContent = bashFile.text
                    bashFile.text = bashContent.replaceAll('APPROOT', Matcher.quoteReplacement('$APP_HOME/'))

                    def batFile = new File(outputDir, applicationName + ".bat")
                    String batContent = batFile.text
                    batFile.text = batContent.replaceAll('APPROOT', Matcher.quoteReplacement('%APP_HOME%\\'))
                }
            }
            distributions {
                def contentSpec = copySpec {
                    from("${rootDir}/docker") {
                        filter(ReplaceTokens, tokens: ['someToken': '123456789'])
                    }
                }

                main {
                    contents {
                        //with contentSpec
                        from("${rootDir}/config") {
                            into "${distributionConfigLocation}"
                        }
                        from("${projectDir}/config") {
                            into "${distributionConfigLocation}"
                        }
                    }
                }
            }
        }
        jar {
            inputs.property("moduleName", moduleName)
            manifest {
                attributes('Automatic-Module-Name': moduleName)
            }
        }
    }
}