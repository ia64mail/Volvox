import org.apache.tools.ant.filters.ReplaceTokens

import java.util.regex.Matcher

subprojects {
    afterEvaluate { project ->
        if (!project.hasProperty('roles')) {
            return
        }
        def projectRoles = (String[]) ext.roles

        if (projectRoles.contains('application')) {
            logger.warn('Configuring ' + name + ' with \'application\' role')

            dependencies {
                /* 3rd party libs */
                // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
                runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
                // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
                runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
                // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
                runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'

                /* test dependencies */
                // https://mvnrepository.com/artifact/junit/junit
                testImplementation group: 'junit', name: 'junit', version: '4.12'
            }

            ext {
                distributionConfigLocation = 'config'
            }

            //setup logger config location
            run {
                doFirst {
                    jvmArgs = [
                            "-Dlog4j.configurationFile=commonLog4j2.xml,log4j2.xml",
                    ]
                    classpath += files("${rootDir}/config", "${projectDir}/config")
                }
            }
            startScripts {
                doFirst {
                    defaultJvmOpts = [
                            "-Dlog4j.configurationFile=commonLog4j2.xml,log4j2.xml"
                    ]
                    classpath += files("STUB_CONFIG_FOLDER_TO_REPLACE") //workaround to keep configs in separate folder
                }
                doLast {
                    def bashFile = new File(outputDir, applicationName)
                    String bashContent = bashFile.text
                    bashFile.text = bashContent.replaceAll('APPROOT', Matcher.quoteReplacement('$APP_HOME/'))
                    bashFile.text = bashContent.replace('$APP_HOME/lib/STUB_CONFIG_FOLDER_TO_REPLACE', '$APP_HOME/' + "${distributionConfigLocation}/")

                    def batFile = new File(outputDir, applicationName + ".bat")
                    String batContent = batFile.text
                    batFile.text = batContent.replaceAll('APPROOT', Matcher.quoteReplacement('%APP_HOME%\\'))
                    batFile.text = batContent.replace('%APP_HOME%\\lib\\STUB_CONFIG_FOLDER_TO_REPLACE', '%APP_HOME%\\' + "${distributionConfigLocation}\\")
                }
            }
            distributions {
                main {
                    contents {
                        into("${distributionConfigLocation}") {
                            from "${projectDir}/config"
                            from "${rootDir}/config"
                        }
                    }
                }
            }
        }
    }
}